File names/ steps to run -

1) To run the basic version - ./5204324511_9179569444_6092528088_basic.sh

2) To run the efficient version - ./5204324511_9179569444_6092528088_efficient.sh

3) size vs memory - 'MemoryPlot.png'

4) size vs time - 'CPUPlot.png'

================================================================================================================================

Directory Structure:

|
----5204324511_9179569444_6092528088_basic.sh
|
----5204324511_9179569444_6092528088_efficient.sh
|
----plot_data.sh
|
----clear_plot_data.sh
|
----test.sh
|
----5204324511_9179569444_6092528088__basic.py
|
----5204324511_9179569444_6092528088__efficient.py
|
----plot_data.py
|
----__init__.py
|
----CPUPlot.png
|
----MemoryPlot.png
|
-----main ---- efficient.py
|			|
|			- inefficient.py
|			|
|			- divide_conquer.py
|			|
|			- input_generator.py
|			|
|			- input_reader.py
|			|
|			-__init__.py
|
-----drivers ---- combined_driver.py
|			|
|			- div_conq_driver.py
|			|
|			- efficient_driver.py
|			|
|			- inefficient_driver.py
|			|
|			-__init__.py
|
----test---- plot_data_test.py
|			|
|			- plot_data_v2_test.py
|			|
|			- stress_test.py
|			|
|			-__init__.py
|
----data----data_efficient.txt
|			|
|----------data_inefficient.txt

================================================================================================================================

Results:

Details about memory usage -

We found that the memory efficient version on the average uses much lesser memory than the basic version. The only case where the basic version used lesser memory than the memory efficient version was when the input size was very small (~ <=30(m+n)). After a certain point, the basic version would start using up a lot of memory whereas the memory efficient version would remain very low. For input size of approximately 2000(m+n) characters, the memory efficient version used up around 250kb whereas the basic version uses around 33000kb.

We observe that the primary reason for that is ensuring the number of columns is 2 in the DP array for the memory efficient version in each divide and conquer step. Another factor that contributes to this is that the building the strings with the help of the inefficient/basic version happens only when the subproblems is of size less than 2. This will ensure that the memory used up by the basic version remains in check throughout the execution of the algorithm.

Details about execution time -

We found that the basic version ran quicker than the memory efficient version. This is obvious as we find the optimal cost in one go and then backtrack the results to find the strings.

The memory efficient versions runs a bit slower than the basic version but its not by much. It was approximately 1.5-2x slower than the basic version. The main reason for this slowdown is the extra running of the space efficient version in the divide and conquer step to find the optimal point to split the string for the next divide and conquer step.

One more interesting observation we made was regarding the theoretical time complexity of the memory efficient version compared to the basic version. Theoretically, memory efficient version must have run 2 times slower than the basic version. This holds true for the cases where the input size was lesser than or equal to approximately 500(m+n) characters, for these input cases, the time used by the memory efficient version was very close to 2 times the time used by the basic version. Once we crossed this threshold of 500(m+n) characters, the memory efficient version takes approzimately 1.5x times the time taken by the basic version.

================================================================================================================================

Contributions:

Input Generator: Harini Ashok
Memory and Time plots: Harini Ashok
Documentation: Harini Ashok

Memory Inefficient Version: Raveendra Shivalingayya Gachchinamath
Memory Efficient Version: Dedeep Reddy Siddareddy

Testing, Analysis of results, insights and observations: Dedeep Reddy Siddareddy, Raveendra Shivalingayya Gachchinamath, Harini Ashok
